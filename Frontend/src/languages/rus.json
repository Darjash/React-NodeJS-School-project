{
"title": "Добро пожаловать на страницу, посвященную введению в протокол авторизации OAuth2.0.",
"description": "Протокол OAuth 2.0 является стандартным протоколом авторизации, все потоки данного протокола приводят к созданию токена доступа, используемого клиентом для доступа к защищенным ресурсам, размещенным на сервере ресурса. Данный протокол позволяет пользователю предоставлять доступ к своим защищенным данным, не раскрывая при этом своих долгосрочных учетных данных, он отделяет роль клиента от роли владельца ресурса.",
"roles": "OAuth2.0 имеет следующие роли:",
"owner":"Владелец ресурсов (Resource Owner): Пользователь или система с защищенными ресурсами.",
"client":"Клиент (Client): Система, запрашивающая доступ.",
"authServer":"Сервер авторизации (Authorization Server): получает запросы Клиента на получение токена доступа и выдает токены доступа после аутентификации и согласия владельца.",
"resServer":"Сервер ресурса (Resource Server): получает запросы Клиента на получение доступа, его цель - принять и проверить токен доступа, и в конечном итоге предоставить запрашиваемые ресурсы.",
"links":"Использованные ссылки",

"register":"Прежде всего клиенту следует зарегистрировать свое приложение (предоставив информацию о приложении, URL-адреса перенаправления (redirect URL), которые приложение будет использовать и тд) на выбранном сервисе (к примеру Facebook/Google) и получить такие данные как client ID и Client Secret, которые будут использоваться для аутентификации приложения на сервисе. Регистрация URL-адресов перенаправления важна так как уменьшает риск того, что токен доступа или код доступа может быть перехвачен злоумышленниками, поскольку программный интерфейс (API) OAuth будет перенаправлять пользователей исключительно на заранее зарегистрированный URL-адрес.",
"secret":"После получения учетных данных важно понимать, что client id является публичной информацией и используется для формирования URL авторизации, но client secret должен оставаться конфиденциальным.",

"info": "Существуют разные варианты шагов, необходимых для получения доступа (С ними можно ознакомиться на <a href=\"https://auth0.com/intro-to-iam/what-is-oauth-2\">сайте OAuth</a>). На данном сайте будет рассмотрен метод “Authorization Code”, который, является наиболее распространенным методом использования OAuth 2.0, и является наиболее подходящим для серверных приложений, в которых получение токена доступа может безопасно происходить на стороне сервера.",

"url":"Все начинается с перенаправления пользователя на страницу авторизации, для этого приложению необходимо создать подобный URL-адрес и перенаправить по нему пользователя:",

"url_response":"response_type=code - сообщает серверу авторизации о том, что используется поток ‘Authorization Code’;",
"url_client_id":"client_id - вышеупомянутый идентификатор полученный при регистрации приложения;",
"url_redirect_uri":"redirect_uri - указывает на то, куда перенаправить пользователя после успешной авторизации;",
"url_scope":"scope - содержит информацию о том, к каким именно данным или разрешениям запрашивается доступ;",
"url_state":"state - должен содержать случайно сгенерированную строку, которая впоследствии сверяется приложением с тем значением, которое вернется после авторизации.",
"button":"Начало авторизации",

"2title":"Этап аутентификации",
"2.1info":"На данном этапе происходит аутентификация пользователя. В этом этапе пользователь вводит свои учетные данные, чтобы подтвердить свою личность перед системой.",

"3title":"Этап получения разрешения",
"3.1info":"После успешной аутентификации система запрашивает у пользователя разрешение на доступ к определенным данным. Это делается для защиты конфиденциальной информации пользователя и предоставления контроля над тем, какие данные могут быть получены или какие действия могут быть выполнены от его имени.",
"3.2info":"То есть, после успешной авторизации пользователь видит например примерно следующее:",
"3.3info":"Приложению '...' будет предоставлен доступ к вашим данным: имени, адресу электронной почты, языковым настройкам и фото профиля.",
"3button":"Разрешить и продолжить",

"4title":"Этап получения временного кода авторизации",
"4.1info":"После успешной авторизации происходит перенаправление пользователя на redirect URI с одноразовым кодом авторизации (к redirect URI будет добавлен code - кратковременный код авторизации, сгенерированный сервером авторизации и state, ожидается, что приложение сверит его с ранее созданным state).",
"4.2info":"Данный код имеет ограниченный срок действия, что делает его более безопасным для передачи по сети.",
"4button":"Далее",

"5title":"Этап обмена временного кода на токен доступа",
"5.1info":"После получения временного кода клиент отправляет его на сервер авторизации в обмен на токен доступа. Токен доступа - это уникальная строка символов, которая предоставляет приложению доступ к защищенным ресурсам.",
"5.2info":"Обмен кода авторизации (code) на токен доступа обычно происходит при помощи запроса к серверу авторизации с параметрами:",
"grant_type":"grant_type=authorization_code;",
"code":"code (код авторизации);",
"redirect_uri":"redirect_uri (при этом стоит ознакомиться с документацией используемого API, так как некоторые API не требуют данного параметра);",
"client_id":"client_id и client_secret (учетные данные полученные при регистрации приложения на сайте выбранного сервиса).",
"5.3info":"Предоставленные в запросе данные проверит сервер авторизации и в случае корректности всех данных вернет токен доступа, который обычно имеет ограниченный срок действия.",
"5.4info":"Впоследствии полученный токен будет использоваться в финальном этапе получения данных пользователя, в качестве заголовка запроса к API выбранного сервиса.  При совершении запросов к API, токен отправляется в заголовке Authorization HTTP-запроса, с префиксом 'Bearer'.",
"5button":"Пройти тест",

"results":"Результаты",
"quitButton":"Завершить",
"group":"Группа",
"name":"Имя",
"quizError":"Введите группу и имя!",
"end":"Тест завершен, вы можете закрыть окно, Результат:",
"test":"Тест",


"quest1?":"Какие основные роли участвуют в протоколе OAuth 2.0?",
"answer1.1":"Владелец ресурсов, клиент, сервер авторизации, сервер ресурса", 
"answer1.2":"Пользователь, администратор, разработчик", 
"answer1.3":"Клиент, сервер, база данных",

"quest2?":"Что представляет собой временный код авторизации?",
"answer2.1":"Одноразовый код, используемый для обмена на токен доступа",
"answer2.2":"Пароль пользователя",
"answer2.3":"Идентификатор клиента",

"quest3?":"Какова основная цель обмена временного кода на токен доступа?",
"answer3.1":"Ускорить процесс авторизации",
"answer3.2":"Предоставить приложению доступ к защищенным ресурсам", 
"answer3.3":"Шифровать данные пользователя",

"quest4?":"Что представляет собой client secret в протоколе OAuth 2.0?",
"answer4.1":"URL-адрес приложения",
"answer4.2":"Публичная информация клиента",
"answer4.3":"Конфиденциальная информация клиента",

"quest5?":"Каким образом приложение указывает серверу, куда перенаправить пользователя после подтверждения запроса авторизации?",
"answer5.1":"Через параметр redirect_uri в URL-адресе запроса авторизации",
"answer5.2":"Через параметр response_type в URL-адресе запроса авторизации",
"answer5.3":"Через параметр state в URL-адресе запроса авторизации",

"quest6?":"Какой сервер выполняет функцию получения запросов клиента на получение токена доступа?",
"answer6.1":"Сервер токена",
"answer6.2":"Сервер авторизации", 
"answer6.3":"Сервер ресурса"
}
